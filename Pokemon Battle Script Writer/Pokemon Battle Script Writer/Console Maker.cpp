#include<iostream>
#include<fstream>
#include<string>
#include<sstream>
using namespace std;

string generateHex(int n){
	stringstream os;
	os << std::hex << n;
	return os.str();
	os.flush();
}

string generateSScript(int snum, int fnum, const string& flag, const string& rematch){
	string line1("Script #" + std::to_string(snum) + "\n\n"); // 2 endl
	string line2("LockAll\nPlaySound 0x547\nFacePlayer\n");
	string line3("StoreFlag " + flag + "\n");
	string line4("0008 0x1\n0011 0x1\n");
	string line5("If 0xFF Function_#" + std::to_string(fnum) + "\n"); //1 endl
	string line6("Message2 0x0 0x4 " + rematch + " 0x0 0x0\n");
	string line7("Jump Function_#" + std::to_string(fnum + 1) + "\n"); //1 endl
	return line1  + line2 + line3 + line4 + line5  + line6 + line7;
}

string generateF1(int fnum, const string& intro){
	string line1("Function #" + std::to_string(fnum) + "\n\n");
	string line2("Message2 0x0 0x4 " + intro + " 0x0 0x0\n");
	string line3("Jump Function_#" + to_string(fnum + 1) + "\n");
	return line1 + line2 + line3;
}

string generateF2(int fnum, const string& reject){
	string line1("Function #" + std::to_string(fnum + 1) + "\n\n");
	string line2("0028 0x8023 0x0\n00B2 0x1F 0x5 0x0 0x0 0x1 0x8023\n00AF 0x0 0xFFFF 0x0\n00AF 0x1 0xFFFF 0x1\n00B0\n0019 0x8023 0x0\n");
	string line3("If 0x1 Function_#" + to_string(fnum + 2) + "\n");
	string line4("Message2 0x0 0x4 " + reject + " 0x0 0x0\n");
	string line5("CloseMessageOnKeyPress2\nReleaseAll\nEnd\n");
	return line1 + line2 + line3 + line4 + line5;
}

string generateF3(int fnum, const string& accept, const string& trainer){
	string line1("Function #" + std::to_string(fnum + 2) + "\n\n");
	string line2("Message2 0x0 0x4 " + accept + " 0x0 0x0\n");
	string line3("CloseMessageOnKeyPress2\n");
	string line4("0085 " + trainer + " 0x0 0x0\n");
	string line5("008D 0x8011\n0009 0x8011\n0008 0x1\n0011 0x1\n");
	string line6("If 0xFF Function_#" + to_string(fnum + 3) + "\n");
	string line7("Jump Function_#" + to_string(fnum + 4) + "\n");
	return line1 + line2 + line3 + line4 + line5 + line6 + line7;
}

string generateF4(int fnum){
	string line1("Function #" + std::to_string(fnum + 3) + "\n\n");
	return line1 + "008C\nReleaseAll\nEnd\n";
}

string generateF5(int fnum, const string& victory, const string& flag){
	string line1("Function #" + std::to_string(fnum + 4) + "\n\n");
	string line2("008E\n");
	string line3("Message2 0x0 0x4 " + victory + " 0x0 0x0\n");
	string line4("CloseMessageOnKeyPress2\n");
	string line5("SetFlag " + flag + "\n");
	string line6("ClearVariable 0x8011\nClearVariable 0x8023\nCloseMessageOnKeyPress2\nReleaseAll\nEnd\n");
	return line1 + line2 + line3 + line4 + line5 + line6;
}

int main(){
	int TNum;
	string flag;
	string sarray[5];
	string trainer;
	string name;
	int snum;
	int fnum;
	cout << "Please Name Your File" << endl;
	cin >> name;
	cout << "Enter Trainer Number" << endl;
	cin >> TNum;
	trainer = generateHex(TNum);
	cout << "Enter Trainer Flag Hex" << endl;
	cin >> flag;
	cout << "Enter Intro String Dec"  << endl;
	cin >> TNum;
	sarray[0] = generateHex(TNum);
	cout << "Enter Reject String Dec" << endl;
	cin >> TNum;
	sarray[1] = generateHex(TNum);
	cout << "Enter Accept String Dec" << endl;
	cin >> TNum;
	sarray[2] = generateHex(TNum);
	cout << "Enter Victory String Dec" << endl;
	cin >> TNum;
	sarray[3] = generateHex(TNum);
	cout << "Enter Rematch String Dec" << endl;
	cin >> TNum;
	sarray[4] = generateHex(TNum);
	cout << "Enter Script number" << endl;
	cin >> snum;
	cout << "Enter first free function number" << endl;
	cin >> fnum;

	trainer = "0x" + trainer;
	flag = "0x" + flag;
	for (int i = 0; i < 5; ++i){
		sarray[i] = "0x" + sarray[i];
		cout << sarray[i];
	}

	//FNum = Rejection Function
	//FNum + 1 = Battle Inquiry
	//FNum + 2 = Battle
	//FNum + 3 = Loss
	//FNum + 4 = Win

	

	ofstream ofile;
	cout << "Generating File..." << endl;
	ofile.open(name + ".txt");
	ofile << "Code Generated by Scott Lee's Code Generator\n\n";
	cout << "Generating Script" << endl;
	ofile << generateSScript(snum, fnum, flag, sarray[4]) << endl << endl;
	cout << "Generating Functions" << endl;
	ofile << generateF1(fnum, sarray[0]) << endl << endl;
	ofile << generateF2(fnum, sarray[1]) << endl << endl;
	ofile << generateF3(fnum, sarray[2], trainer) << endl << endl;
	ofile << generateF4(fnum) << endl << endl;
	ofile << generateF5(fnum, sarray[3], flag) << endl << endl;
	cout << "Build Successful" << endl;
	ofile.close();
}

